# Overlay to docker-compose.yml file for development
version: "3.6"
services:

  proxy:
    ports:
      - 80:80
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      # Use DEBUG for more verbosity
      - --log.level=INFO
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
      # Use HTTP (port 80) as entrypoint
      - --entrypoints.web.address=:80


  celeryworker:
    build:
      context: ./backend
    environment:
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    volumes:
      - ./backend/app:/work/app

  backend:
    build:
      context: ./backend
    user: ${USER?User not set}
    volumes:
      - ./backend/app:/work/app
    environment:
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    command: dev
    labels:
      # Service is served on port 5000
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=5000
      # Use web port
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend.entrypoints=web

  frontend:
    build:
      context: ./frontend
      dockerfile: development.Dockerfile
    user: ${USER?User not set}
    volumes:
      - ./frontend/src/:/app/src/
    command: start
    labels:
      # Service served on port 3000
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=3000
      # Use web port
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend.entrypoints=web

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
