version: "3.6"
services:

  proxy:
    ports:
      - 80:80
      - 443:443
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Set docker network to use
      - --providers.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.web.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.websecure.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.letsencrypt.acme.email=${EMAIL?Variable not set}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.letsencrypt.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    labels:
      # Use the traefik-public network (declared below)
      - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
      # admin-auth middleware with HTTP Basic auth
      # Using the environment variables TRAEFIK_USERNAME and TRAEFIK_HASHED_PASSWORD
      - traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_USERNAME?Variable not set}:${TRAEFIK_HASHED_PASSWORD?Variable not set}
      # traefik-http set up only to use the middleware to redirect to https
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
      # Handle host with and without "www" to redirect to only one of them
      # Uses environment variable DOMAIN
      # To disable www redirection remove the Host() you want to discard, here and
      # below for HTTPS
      - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=web
      - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=https-redirect
      # traefik-https the actual router using HTTPS
      # Uses the environment variable DOMAIN
      - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=websecure
      - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.service=api@internal
      # Use the "le" (Let's Encrypt) resolver created below
      - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=letsencrypt
      # Enable HTTP Basic auth, using the middleware created above
      - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=admin-auth
      # Define the port inside of the Docker service to use
      - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=8080
    volumes:
      - traefik-certificates:/certificates
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          - node.labels.traefik-public.traefik-public-certificates == true
          - node.role == manager

  db:
    env_file:
      - production.env

  celeryworker:
    environment:
      - SERVER_HOST=https://${DOMAIN?Variable not set}
    env_file:
      - production.env

  backend:
    env_file:
      - production.env
    environment:
      - SERVER_HOST=https://${DOMAIN?Variable not set}
    labels:
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

  frontend:
    labels:
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

volumes:
  traefik-certificates:

networks:
  traefik-public:
    external: true
